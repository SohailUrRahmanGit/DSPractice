public class LinkedList {
    var head: Node<Value>
    var tail: Node<Value>
    
    init() {}
    
     public var isEmpty: Bool {
        return head == nil
    }
    
    public mutating func push() {}
    public mutating func append() {}
    public mutating func insertAfter(){}
    public mutating func pop() {}
    public mutating func removeAfter() {}
    public mutating func removeLast( {}
    public mutating func node(at:) {}
}


public class Node<Value> {
    public var value : Value 
    public var next: Node?
    
    public init(value: Value, next: Node? = nil) {
        self.value = value
        self.next = next
    }
}

extension Node: CustomStringConvertible {
    public var description : String {
        guard let next = next else {
            return "\(value)"
        }
        return "\(value) ->" + String(describing: next) + " "
    }
}
